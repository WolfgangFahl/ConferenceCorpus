'''
Created on 19.05.2022

@author: wf
'''
import datetime
class Figure():
    '''
    a figure 
    '''
    def __init__(self,title,caption,figLabel,sqlQuery,fileNames,px=600,scale=None):
        '''
        constructore
        '''
        self.title=title
        self.caption=caption
        self.sqlQuery=sqlQuery
        self.figLabel=figLabel
        self.fileNames=fileNames
        self.px=px
        self.scale=scale
        self.scalemarkup=f"[scale={scale}]" if scale else ""
        
    def asWikiMarkup(self):
        '''
        create mediawiki markup to show the given outputFilename and sqlQuery
        '''
        markup=f"""== {self.title} =="""
        if self.sqlQuery:
            markup+=f"""
=== sql query ===
<source lang='sql'>
{self.sqlQuery}
</source>"""
        markup+=f"""
=== {self.caption} ===
"""
        for fileName in self.fileNames:
            markup+=f"""[[File:{fileName}|{self.px}px]]"""
        return markup 
    
    def asLatex(self):
        '''
        get the latex Code for the given figure
        '''
        latex="""\\begin{figure}
    \centering{
    """
        fileCount=len(self.fileNames)
        for fileName in self.fileNames:
            latex+=f"""
        {{\\includegraphics{self.scalemarkup}[width=\\linewidth/{fileCount}]{{{self.latexFolder}{fileName}}}}}%"""
        latex+="""
    }
    \caption{%s}
    \label{fig:%s}
\end{figure}""" % (self.caption,self.figLabel)
        return latex 
    
class FigureList():
    '''
    Figure List
    '''
    maxFigureListId=0
    
    def __init__(self,latexFolder="results/",figureListId=None):
        '''
        constructor
        '''
        self.clear()
        self.latexFolder=latexFolder
        self.isodate=datetime.datetime.now().isoformat()
        if figureListId is None:
            FigureList.maxFigureListId+=1
            figureListId=FigureList.maxFigureListId
        self.figureListId=figureListId
    
    def clear(self):
        self.figures=[]      
        
    def add(self,figure:Figure):
        figure.latexFolder=self.latexFolder
        self.figures.append(figure)
        
    def latexComment(self,preamble:bool=True):
        '''
        create a latex comment
        '''
        if preamble:
            text=f"""% >>>figureList {self.figureListId} generated by {__file__} on {self.isodate}"""
        else:
            text=f"%<<<figureList {self.figureListId}: end of generated latex code"
        return text
    
    def printAllMarkups(self):
        '''
        print all Markus
        '''
        for figure in self.figures:
            print(figure.asWikiMarkup())
        print(self.latexComment(True))
        for figure in self.figures:
            print(figure.asLatex())
        print(self.latexComment(False))